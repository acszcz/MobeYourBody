{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\acszc\\\\mobeyourbody-next\\\\src\\\\contexts\\\\CountdouwnContext.tsx\";\nimport { createContext, useContext, useEffect, useState } from \"react\";\nimport { ChallengesContext } from \"./ContextChallenge\";\nexport const CountdownContext = /*#__PURE__*/createContext({});\nexport function CountdownProvider({\n  children\n}) {\n  const {\n    startNewChallenge\n  } = useContext(ChallengesContext);\n  const {\n    0: time,\n    1: setTime\n  } = useState(25 * 60);\n  const {\n    0: isActive,\n    1: setIsActive\n  } = useState(false);\n  const {\n    0: hasFinished,\n    1: setHasFinished\n  } = useState(false);\n  const minutes = Math.floor(time / 60);\n  const seconds = time % 60;\n  let countdownTimeout;\n\n  function startCountdown() {\n    setIsActive(true);\n  }\n\n  function resetCountdown() {\n    clearTimeout(countdownTimeout);\n    setIsActive(false);\n    setTime(0.1 * 60);\n  }\n\n  useEffect(() => {\n    if (isActive && time > 0) {\n      countdownTimeout = setTimeout(() => {\n        setTime(time - 1);\n      }, 1000);\n    } else if (isActive && time === 0) {\n      setHasFinished(true);\n      setIsActive(false);\n      startNewChallenge();\n    }\n  }, [isActive, time]);\n  return /*#__PURE__*/_jsxDEV(CountdownContext.Provider, {\n    value: {\n      minutes,\n      seconds,\n      hasFinished,\n      isActive,\n      startCountdown,\n      resetCountdown\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n}","map":{"version":3,"sources":["C:/Users/acszc/mobeyourbody-next/src/contexts/CountdouwnContext.tsx"],"names":["createContext","useContext","useEffect","useState","ChallengesContext","CountdownContext","CountdownProvider","children","startNewChallenge","time","setTime","isActive","setIsActive","hasFinished","setHasFinished","minutes","Math","floor","seconds","countdownTimeout","startCountdown","resetCountdown","clearTimeout","setTimeout"],"mappings":";;AAAA,SAASA,aAAT,EAAmCC,UAAnC,EAA+CC,SAA/C,EAA0DC,QAA1D,QAA0E,OAA1E;AACA,SAASC,iBAAT,QAAkC,oBAAlC;AAcA,OAAO,MAAMC,gBAAgB,gBAAGL,aAAa,CAAC,EAAD,CAAtC;AAEP,OAAO,SAASM,iBAAT,CAA2B;AAACC,EAAAA;AAAD,CAA3B,EAAsC;AACzC,QAAM;AAAEC,IAAAA;AAAF,MAAwBP,UAAU,CAACG,iBAAD,CAAxC;AAGA,QAAM;AAAA,OAACK,IAAD;AAAA,OAAOC;AAAP,MAAkBP,QAAQ,CAAC,KAAK,EAAN,CAAhC;AACA,QAAM;AAAA,OAACQ,QAAD;AAAA,OAAWC;AAAX,MAA0BT,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM;AAAA,OAACU,WAAD;AAAA,OAAcC;AAAd,MAAgCX,QAAQ,CAAC,KAAD,CAA9C;AAEA,QAAMY,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWR,IAAI,GAAG,EAAlB,CAAhB;AACA,QAAMS,OAAO,GAAGT,IAAI,GAAG,EAAvB;AACA,MAAIU,gBAAJ;;AACA,WAASC,cAAT,GAA0B;AACtBR,IAAAA,WAAW,CAAC,IAAD,CAAX;AACD;;AAED,WAASS,cAAT,GAA0B;AACxBC,IAAAA,YAAY,CAACH,gBAAD,CAAZ;AACAP,IAAAA,WAAW,CAAC,KAAD,CAAX;AACAF,IAAAA,OAAO,CAAC,MAAM,EAAP,CAAP;AACD;;AAEDR,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIS,QAAQ,IAAIF,IAAI,GAAG,CAAvB,EAA0B;AACxBU,MAAAA,gBAAgB,GAAGI,UAAU,CAAC,MAAM;AAClCb,QAAAA,OAAO,CAACD,IAAI,GAAG,CAAR,CAAP;AACD,OAF4B,EAE1B,IAF0B,CAA7B;AAGD,KAJD,MAIO,IAAIE,QAAQ,IAAIF,IAAI,KAAK,CAAzB,EAA4B;AACjCK,MAAAA,cAAc,CAAC,IAAD,CAAd;AACAF,MAAAA,WAAW,CAAC,KAAD,CAAX;AACAJ,MAAAA,iBAAiB;AAClB;AACF,GAVQ,EAUN,CAACG,QAAD,EAAWF,IAAX,CAVM,CAAT;AAYF,sBACI,QAAC,gBAAD,CAAkB,QAAlB;AAA2B,IAAA,KAAK,EAAE;AAACM,MAAAA,OAAD;AAAUG,MAAAA,OAAV;AAAmBL,MAAAA,WAAnB;AAAgCF,MAAAA,QAAhC;AAA0CS,MAAAA,cAA1C;AAA0DC,MAAAA;AAA1D,KAAlC;AAAA,cACKd;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH","sourcesContent":["import { createContext, ReactNode, useContext, useEffect, useState } from \"react\";\r\nimport { ChallengesContext } from \"./ContextChallenge\";\r\n\r\ninterface CountdownProviderProps {\r\n    children: ReactNode;\r\n}\r\ninterface CountdownContextData{\r\n    minutes: number;\r\n    seconds: number;\r\n    hasFinished: boolean;\r\n    isActive: boolean;\r\n    startCountdown: () => void;\r\n    resetCountdown: () => void;\r\n}\r\n\r\nexport const CountdownContext = createContext({} as CountdownContextData);\r\n\r\nexport function CountdownProvider({children}){\r\n    const { startNewChallenge } = useContext(ChallengesContext);\r\n\r\n  \r\n    const [time, setTime] = useState(25 * 60);\r\n    const [isActive, setIsActive] = useState(false);\r\n    const [hasFinished, setHasFinished] = useState(false);  \r\n  \r\n    const minutes = Math.floor(time / 60);\r\n    const seconds = time % 60;\r\n    let countdownTimeout: NodeJS.Timeout;\r\n    function startCountdown() {\r\n        setIsActive(true);\r\n      }\r\n    \r\n      function resetCountdown() {\r\n        clearTimeout(countdownTimeout);\r\n        setIsActive(false);\r\n        setTime(0.1 * 60);\r\n      }\r\n    \r\n      useEffect(() => {\r\n        if (isActive && time > 0) {\r\n          countdownTimeout = setTimeout(() => {\r\n            setTime(time - 1);\r\n          }, 1000)\r\n        } else if (isActive && time === 0) {\r\n          setHasFinished(true);\r\n          setIsActive(false);\r\n          startNewChallenge();\r\n        }\r\n      }, [isActive, time]);\r\n\r\n    return(\r\n        <CountdownContext.Provider value={{minutes, seconds, hasFinished, isActive, startCountdown, resetCountdown}}>\r\n            {children}\r\n        </CountdownContext.Provider>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}