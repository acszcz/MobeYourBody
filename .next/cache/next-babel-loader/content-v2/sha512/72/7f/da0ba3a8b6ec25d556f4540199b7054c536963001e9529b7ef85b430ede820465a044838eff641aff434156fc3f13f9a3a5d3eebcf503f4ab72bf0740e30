{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\acszc\\\\mobeyourbody-next\\\\src\\\\contexts\\\\ContextChallenge.tsx\";\nimport { createContext } from 'react';\nimport { useState } from 'react';\nimport challenges from '../../challenges.json';\nexport const ContextChallenge = /*#__PURE__*/createContext({});\nexport function ChallengeProvider({\n  Children\n}) {\n  const {\n    0: level,\n    1: setLevel\n  } = useState(1);\n  const {\n    0: CurrentExperience,\n    1: setCurrentExperience\n  } = useState(0);\n  const {\n    0: CompletedChallenges,\n    1: setCompletedChallenges\n  } = useState(0);\n  const {\n    0: activeChallenge,\n    1: setActiveChallenge\n  } = useState(null);\n  const experienceToTheNextLevel = Math.pow((level + 1) * 4, 2);\n\n  function LevelUp() {\n    setLevel(level + 1);\n  }\n\n  function startNewChallenge() {\n    const randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    const challenge = challenges[randomChallengeIndex];\n    setActiveChallenge(challenge);\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ContextChallenge.Provider, {\n    value: {\n      level,\n      CurrentExperience,\n      CompletedChallenges,\n      activeChallenge,\n      LevelUp,\n      startNewChallenge,\n      resetChallenge\n    },\n    children: Children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n}","map":{"version":3,"sources":["C:/Users/acszc/mobeyourbody-next/src/contexts/ContextChallenge.tsx"],"names":["createContext","useState","challenges","ContextChallenge","ChallengeProvider","Children","level","setLevel","CurrentExperience","setCurrentExperience","CompletedChallenges","setCompletedChallenges","activeChallenge","setActiveChallenge","experienceToTheNextLevel","Math","pow","LevelUp","startNewChallenge","randomChallengeIndex","floor","random","length","challenge","resetChallenge"],"mappings":";;AAAA,SAASA,aAAT,QAA8B,OAA9B;AACA,SAASC,QAAT,QAAyB,OAAzB;AAEA,OAAOC,UAAP,MAAuB,uBAAvB;AAsBA,OAAO,MAAMC,gBAAgB,gBAAGH,aAAa,CAAC,EAAD,CAAtC;AAEP,OAAO,SAASI,iBAAT,CAA2B;AAAEC,EAAAA;AAAF,CAA3B,EAAgE;AACnE,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBN,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM;AAAA,OAACO,iBAAD;AAAA,OAAoBC;AAApB,MAA4CR,QAAQ,CAAC,CAAD,CAA1D;AACA,QAAM;AAAA,OAACS,mBAAD;AAAA,OAAsBC;AAAtB,MAAgDV,QAAQ,CAAC,CAAD,CAA9D;AACA,QAAM;AAAA,OAACW,eAAD;AAAA,OAAkBC;AAAlB,MAAwCZ,QAAQ,CAAC,IAAD,CAAtD;AACA,QAAMa,wBAAwB,GAAGC,IAAI,CAACC,GAAL,CAAS,CAACV,KAAK,GAAC,CAAP,IAAW,CAApB,EAAwB,CAAxB,CAAjC;;AAEI,WAASW,OAAT,GAAkB;AAChBV,IAAAA,QAAQ,CAACD,KAAK,GAAC,CAAP,CAAR;AACD;;AAED,WAASY,iBAAT,GAA4B;AACxB,UAAMC,oBAAoB,GAAGJ,IAAI,CAACK,KAAL,CAAWL,IAAI,CAACM,MAAL,KAAgBnB,UAAU,CAACoB,MAAtC,CAA7B;AACA,UAAMC,SAAS,GAAGrB,UAAU,CAACiB,oBAAD,CAA5B;AACAN,IAAAA,kBAAkB,CAACU,SAAD,CAAlB;AACH;;AACD,WAASC,cAAT,GAAyB;AACrBX,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACH;;AAEL,sBACI,QAAC,gBAAD,CAAkB,QAAlB;AAA2B,IAAA,KAAK,EAAE;AAAEP,MAAAA,KAAF;AAASE,MAAAA,iBAAT;AAA4BE,MAAAA,mBAA5B;AAAiDE,MAAAA,eAAjD;AAAkEK,MAAAA,OAAlE;AAA2EC,MAAAA,iBAA3E;AAA8FM,MAAAA;AAA9F,KAAlC;AAAA,cACKnB;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH","sourcesContent":["import { createContext } from 'react';\r\nimport { useState } from 'react';\r\nimport { ReactNode } from 'react';\r\nimport challenges from '../../challenges.json';\r\n\r\ninterface Challenge{\r\n    type: 'body' | 'eye';\r\n    description: string;\r\n    amount: number;\r\n}\r\n\r\ninterface startNewChallengeData{\r\n    level: number;\r\n    CurrentExperience: number;\r\n    CompletedChallenges: number;\r\n    activeChallenge: Challenge;\r\n    LevelUp: () => void;\r\n    startNewChallenge: () => void;\r\n    resetChallenge: () => void;\r\n}\r\n\r\ninterface ChallengeProviderProps{\r\n    Children: ReactNode;\r\n}\r\n\r\nexport const ContextChallenge = createContext({} as startNewChallengeData);\r\n\r\nexport function ChallengeProvider({ Children }: ChallengeProviderProps){\r\n    const [level, setLevel] = useState(1);\r\n    const [CurrentExperience, setCurrentExperience] = useState(0);\r\n    const [CompletedChallenges, setCompletedChallenges] = useState(0);\r\n    const [activeChallenge, setActiveChallenge] = useState(null);            \r\n    const experienceToTheNextLevel = Math.pow((level+1)* 4 , 2);\r\n\r\n        function LevelUp(){\r\n          setLevel(level+1);\r\n        }\r\n\r\n        function startNewChallenge(){\r\n            const randomChallengeIndex = Math.floor(Math.random() * challenges.length);\r\n            const challenge = challenges[randomChallengeIndex];\r\n            setActiveChallenge(challenge);\r\n        }\r\n        function resetChallenge(){\r\n            setActiveChallenge(null);\r\n        }\r\n\r\n    return(\r\n        <ContextChallenge.Provider value={{ level, CurrentExperience, CompletedChallenges, activeChallenge, LevelUp, startNewChallenge, resetChallenge}}>\r\n            {Children}\r\n        </ContextChallenge.Provider>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}